
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\006\000\002\002\017" +
    "\000\002\002\016\000\002\002\016\000\002\002\015\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\010\000\002\004\010" +
    "\000\002\004\011\000\002\004\011\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\006\011\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\007\000\002\007\015" +
    "\000\002\010\011\000\002\011\013\000\002\012\011\000" +
    "\002\014\012\000\002\014\011\000\002\005\005\000\002" +
    "\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\006\010\005\011\004\001\002\000\004\045" +
    "\243\001\002\000\004\011\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\045\011\001" +
    "\002\000\004\037\012\001\002\000\026\006\021\007\025" +
    "\010\022\012\032\015\020\016\015\021\014\022\030\040" +
    "\027\045\031\001\002\000\024\006\ufff1\007\ufff1\015\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\040\ufff1\045\ufff1\001" +
    "\002\000\004\035\235\001\002\000\004\035\223\001\002" +
    "\000\024\006\uffee\007\uffee\015\uffee\016\uffee\020\uffee\021" +
    "\uffee\022\uffee\040\uffee\045\uffee\001\002\000\024\006\ufff7" +
    "\007\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\040" +
    "\ufff7\045\ufff7\001\002\000\004\045\204\001\002\000\006" +
    "\033\167\045\170\001\002\000\004\012\157\001\002\000" +
    "\024\006\ufff3\007\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\040\ufff3\045\ufff3\001\002\000\024\006\ufff5\007" +
    "\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\040\ufff5" +
    "\045\ufff5\001\002\000\006\033\143\045\142\001\002\000" +
    "\024\006\021\007\025\015\020\016\015\020\043\021\014" +
    "\022\030\040\141\045\031\001\002\000\004\002\ufffe\001" +
    "\002\000\004\035\106\001\002\000\004\023\074\001\002" +
    "\000\004\045\033\001\002\000\004\035\034\001\002\000" +
    "\004\036\035\001\002\000\004\037\036\001\002\000\020" +
    "\006\021\007\025\015\020\016\015\021\014\022\030\045" +
    "\031\001\002\000\024\006\021\007\025\015\020\016\015" +
    "\020\043\021\014\022\030\040\046\045\031\001\002\000" +
    "\024\006\ufff2\007\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\040\ufff2\045\ufff2\001\002\000\024\006\uffef\007" +
    "\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef\040\uffef" +
    "\045\uffef\001\002\000\024\006\ufff8\007\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\040\ufff8\045\ufff8\001\002" +
    "\000\004\037\052\001\002\000\024\006\ufff4\007\ufff4\015" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\040\ufff4\045\ufff4" +
    "\001\002\000\024\006\ufff6\007\ufff6\015\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\040\ufff6\045\ufff6\001\002\000\004" +
    "\040\051\001\002\000\004\020\043\001\002\000\024\006" +
    "\ufff0\007\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\040\ufff0\045\ufff0\001\002\000\004\002\ufffa\001\002\000" +
    "\020\006\021\007\025\015\020\016\015\021\014\022\030" +
    "\045\031\001\002\000\024\006\021\007\025\015\020\016" +
    "\015\020\043\021\014\022\030\040\054\045\031\001\002" +
    "\000\004\021\055\001\002\000\004\035\056\001\002\000" +
    "\006\034\060\045\061\001\002\000\004\036\072\001\002" +
    "\000\006\036\uffdb\044\uffdb\001\002\000\004\031\062\001" +
    "\002\000\012\005\064\034\065\045\066\046\063\001\002" +
    "\000\006\036\uffd9\044\uffd9\001\002\000\006\005\067\045" +
    "\070\001\002\000\006\036\uffda\044\uffda\001\002\000\006" +
    "\036\uffd8\044\uffd8\001\002\000\006\036\uffd7\044\uffd7\001" +
    "\002\000\004\005\071\001\002\000\006\036\uffd6\044\uffd6" +
    "\001\002\000\004\044\073\001\002\000\024\006\uffd3\007" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\040\uffd3" +
    "\045\uffd3\001\002\000\006\045\076\046\075\001\002\000" +
    "\004\044\105\001\002\000\006\024\100\025\077\001\002" +
    "\000\004\045\103\001\002\000\004\045\101\001\002\000" +
    "\004\044\102\001\002\000\024\006\uffde\007\uffde\015\uffde" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\040\uffde\045\uffde\001" +
    "\002\000\004\044\104\001\002\000\024\006\uffdd\007\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\040\uffdd\045" +
    "\uffdd\001\002\000\024\006\uffdf\007\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\040\uffdf\045\uffdf\001\002\000" +
    "\006\006\110\045\111\001\002\000\004\036\135\001\002" +
    "\000\004\045\126\001\002\000\004\023\112\001\002\000" +
    "\004\046\113\001\002\000\004\044\114\001\002\000\006" +
    "\034\060\045\061\001\002\000\004\044\116\001\002\000" +
    "\006\033\121\045\120\001\002\000\004\036\uffd0\001\002" +
    "\000\006\032\123\033\124\001\002\000\004\045\122\001" +
    "\002\000\004\036\uffcd\001\002\000\004\046\125\001\002" +
    "\000\004\036\uffce\001\002\000\004\036\uffcf\001\002\000" +
    "\004\023\127\001\002\000\004\046\130\001\002\000\004" +
    "\044\131\001\002\000\006\034\060\045\061\001\002\000" +
    "\004\044\133\001\002\000\006\033\121\045\120\001\002" +
    "\000\004\036\uffd1\001\002\000\004\037\136\001\002\000" +
    "\020\006\021\007\025\015\020\016\015\021\014\022\030" +
    "\045\031\001\002\000\024\006\021\007\025\015\020\016" +
    "\015\020\043\021\014\022\030\040\140\045\031\001\002" +
    "\000\024\006\uffd2\007\uffd2\015\uffd2\016\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\040\uffd2\045\uffd2\001\002\000\004\002\000" +
    "\001\002\000\012\023\151\032\146\033\150\044\147\001" +
    "\002\000\004\045\144\001\002\000\004\044\145\001\002" +
    "\000\024\006\uffe9\007\uffe9\015\uffe9\016\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\040\uffe9\045\uffe9\001\002\000\004\046\155" +
    "\001\002\000\024\006\uffed\007\uffed\015\uffed\016\uffed\020" +
    "\uffed\021\uffed\022\uffed\040\uffed\045\uffed\001\002\000\004" +
    "\044\154\001\002\000\004\046\152\001\002\000\004\044" +
    "\153\001\002\000\024\006\uffeb\007\uffeb\015\uffeb\016\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\040\uffeb\045\uffeb\001\002\000" +
    "\024\006\uffea\007\uffea\015\uffea\016\uffea\020\uffea\021\uffea" +
    "\022\uffea\040\uffea\045\uffea\001\002\000\004\044\156\001" +
    "\002\000\024\006\uffec\007\uffec\015\uffec\016\uffec\020\uffec" +
    "\021\uffec\022\uffec\040\uffec\045\uffec\001\002\000\004\045" +
    "\160\001\002\000\004\035\161\001\002\000\004\036\162" +
    "\001\002\000\004\037\163\001\002\000\020\006\021\007" +
    "\025\015\020\016\015\021\014\022\030\045\031\001\002" +
    "\000\024\006\021\007\025\015\020\016\015\020\043\021" +
    "\014\022\030\040\165\045\031\001\002\000\004\040\166" +
    "\001\002\000\004\002\ufffc\001\002\000\004\045\202\001" +
    "\002\000\012\023\174\032\171\033\173\044\172\001\002" +
    "\000\004\046\200\001\002\000\024\006\uffe8\007\uffe8\015" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\040\uffe8\045\uffe8" +
    "\001\002\000\004\044\177\001\002\000\004\046\175\001" +
    "\002\000\004\044\176\001\002\000\024\006\uffe6\007\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\040\uffe6\045" +
    "\uffe6\001\002\000\024\006\uffe5\007\uffe5\015\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\040\uffe5\045\uffe5\001\002\000" +
    "\004\044\201\001\002\000\024\006\uffe7\007\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\021\uffe7\022\uffe7\040\uffe7\045\uffe7\001" +
    "\002\000\004\044\203\001\002\000\024\006\uffe4\007\uffe4" +
    "\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\040\uffe4\045" +
    "\uffe4\001\002\000\006\023\206\032\205\001\002\000\004" +
    "\005\215\001\002\000\004\005\207\001\002\000\006\005" +
    "\210\045\211\001\002\000\004\044\214\001\002\000\004" +
    "\005\212\001\002\000\004\044\213\001\002\000\024\006" +
    "\uffe0\007\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\040\uffe0\045\uffe0\001\002\000\024\006\uffe2\007\uffe2\015" +
    "\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\040\uffe2\045\uffe2" +
    "\001\002\000\006\005\216\045\217\001\002\000\004\044" +
    "\222\001\002\000\004\005\220\001\002\000\004\044\221" +
    "\001\002\000\024\006\uffe1\007\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\040\uffe1\045\uffe1\001\002\000\024" +
    "\006\uffe3\007\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\040\uffe3\045\uffe3\001\002\000\006\034\060\045\061" +
    "\001\002\000\004\036\225\001\002\000\004\037\226\001" +
    "\002\000\020\006\021\007\025\015\020\016\015\021\014" +
    "\022\030\045\031\001\002\000\024\006\021\007\025\015" +
    "\020\016\015\020\043\021\014\022\030\040\230\045\031" +
    "\001\002\000\026\006\uffdc\007\uffdc\015\uffdc\016\uffdc\017" +
    "\231\020\uffdc\021\uffdc\022\uffdc\040\uffdc\045\uffdc\001\002" +
    "\000\004\037\232\001\002\000\020\006\021\007\025\015" +
    "\020\016\015\021\014\022\030\045\031\001\002\000\024" +
    "\006\021\007\025\015\020\016\015\020\043\021\014\022" +
    "\030\040\234\045\031\001\002\000\024\006\uffd5\007\uffd5" +
    "\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\040\uffd5\045" +
    "\uffd5\001\002\000\006\034\060\045\061\001\002\000\004" +
    "\036\237\001\002\000\004\037\240\001\002\000\020\006" +
    "\021\007\025\015\020\016\015\021\014\022\030\045\031" +
    "\001\002\000\024\006\021\007\025\015\020\016\015\020" +
    "\043\021\014\022\030\040\242\045\031\001\002\000\024" +
    "\006\uffd4\007\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\040\uffd4\045\uffd4\001\002\000\004\037\244\001\002" +
    "\000\026\006\021\007\025\010\245\012\250\015\020\016" +
    "\015\021\014\022\030\040\247\045\031\001\002\000\004" +
    "\012\261\001\002\000\024\006\021\007\025\015\020\016" +
    "\015\020\043\021\014\022\030\040\260\045\031\001\002" +
    "\000\004\002\ufffd\001\002\000\004\045\251\001\002\000" +
    "\004\035\252\001\002\000\004\036\253\001\002\000\004" +
    "\037\254\001\002\000\020\006\021\007\025\015\020\016" +
    "\015\021\014\022\030\045\031\001\002\000\024\006\021" +
    "\007\025\015\020\016\015\020\043\021\014\022\030\040" +
    "\256\045\031\001\002\000\004\040\257\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\uffff\001\002\000\004\045" +
    "\262\001\002\000\004\035\263\001\002\000\004\036\264" +
    "\001\002\000\004\037\265\001\002\000\020\006\021\007" +
    "\025\015\020\016\015\021\014\022\030\045\031\001\002" +
    "\000\024\006\021\007\025\015\020\016\015\020\043\021" +
    "\014\022\030\040\267\045\031\001\002\000\004\040\270" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\025\004\016\006" +
    "\023\007\022\010\012\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\041\006\044\007\043\010\037\011\046" +
    "\012\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\036\004\016\006" +
    "\023\007\022\010\012\012\015\001\001\000\016\004\041" +
    "\006\044\007\043\010\037\011\046\012\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\052\004\016\006\023\007\022\010" +
    "\012\012\015\001\001\000\016\004\041\006\044\007\043" +
    "\010\037\011\046\012\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\114\001\001\000\002\001\001\000\004\005\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\131\001\001\000\002\001\001\000\004" +
    "\005\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\136\004\016\006\023\007\022\010\012\012\015" +
    "\001\001\000\016\004\041\006\044\007\043\010\037\011" +
    "\046\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\163\004\016\006\023\007\022" +
    "\010\012\012\015\001\001\000\016\004\041\006\044\007" +
    "\043\010\037\011\046\012\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\226\004\016\006\023\007\022\010\012\012" +
    "\015\001\001\000\016\004\041\006\044\007\043\010\037" +
    "\011\046\012\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\232\004\016\006\023\007\022\010\012" +
    "\012\015\001\001\000\016\004\041\006\044\007\043\010" +
    "\037\011\046\012\040\001\001\000\002\001\001\000\004" +
    "\013\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\240\004\016\006\023\007\022\010\012\012\015" +
    "\001\001\000\016\004\041\006\044\007\043\010\037\011" +
    "\046\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\245\004\016\006\023\007\022\010\012\012" +
    "\015\001\001\000\002\001\001\000\016\004\041\006\044" +
    "\007\043\010\037\011\046\012\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\254\004\016\006\023\007" +
    "\022\010\012\012\015\001\001\000\016\004\041\006\044" +
    "\007\043\010\037\011\046\012\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\265\004\016\006\023\007\022\010\012\012\015" +
    "\001\001\000\016\004\041\006\044\007\043\010\037\011" +
    "\046\012\040\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Public Class Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Class Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Public Class Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Class Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Public Class Identificador Llave_a Public Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Class Identificador Llave_a Public Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Public Class Identificador Llave_a Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Class Identificador Llave_a Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
